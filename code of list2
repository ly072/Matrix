#include<iostream>
#include "Windows.h"
#include<cstdlib>
#include<string>
#include<queue>

using namespace std;




#define MAXLEN 100 //定义顺序表的最大长度

#define LIST_INIT_SIZE 5

#define LISTINCREMENT 5

#define OK 1

#define ERROR 0 

#define INFEASIBLE -1

#define OVERFLOW -2

#define ElemType big

#define Status int



#define ToRed SetConsoleTextAttribute(handle, FOREGROUND_INTENSITY | FOREGROUND_RED )
#define ToGreen SetConsoleTextAttribute(handle, FOREGROUND_INTENSITY | FOREGROUND_GREEN)
#define ToWhite SetConsoleTextAttribute(handle, FOREGROUND_INTENSITY | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED)
#define ToYellow SetConsoleTextAttribute(handle, FOREGROUND_INTENSITY | FOREGROUND_RED | FOREGROUND_GREEN)


struct big
{
	int loc;
	string ID;
	string name;
	string sex;
	string score;
};

struct SqList

{

	ElemType *elem;

	int length;

	int listsize;

};


Status InitList_Sq(SqList &L)

{

	L.elem = new ElemType[LIST_INIT_SIZE];

	if (!L.elem) exit(ERROR);

	L.length = 0;

	L.listsize = LIST_INIT_SIZE;

	return 1;

}//初始化

Status ListInsert_Sq(SqList &L, int i, string ID_use, string name_use, string sex_use, string score_use)
{

	if (i<1 || i>L.length + 1)
		return OVERFLOW;
	if (L.length >= L.listsize)
	{
		//newbase = (ElemType *)realloc(L.elem, (L.listsize + LISTINCREMENT) * sizeof(ElemType));
		ElemType *tempp = new ElemType[(L.listsize + LISTINCREMENT)];//重新分配一个更大的
		memcpy(tempp, L.elem, L.length*sizeof(ElemType));//将原来的内容复制过去
		delete[] L.elem;//删掉原来的数组
		L.elem = tempp;
		if (!L.elem)exit(ERROR);
		L.listsize += LISTINCREMENT;
	}
	ElemType *q = &(L.elem[i - 1]);
	for (ElemType *p = &(L.elem[L.length - 1]); p >= q; --p)
		*(p + 1) = *p;
	q->ID = ID_use;
	q->name = name_use;
	q->sex = sex_use;
	q->score = score_use;
	++L.length;
	return OK;
}//ListInsert_Sq                                                                                                                                                                      

Status ListDelete_id_Sq(SqList &L, string de_id, ElemType &e)
{
	bool find = false;
	for (int i = 0; i < L.length; i++)
	{
		ElemType *p = &(L.elem[0]);
		if ((p + i)->ID == de_id)
		{
				ElemType *q = L.elem + L.length - 1;
				for (p++; p+i <= q; ++p)
					*(p+i-1) = *(p+i);
				--L.length;
				find = true;
		}
	}
	if (find == 0)
		return ERROR;
	
	
	return OK;


}//LIST_DELETE


Status ListDelete_name_Sq(SqList &L, string de_name, ElemType &e)
{
	bool find = false;
	for (int i = 0; i < L.length; i++)
	{
		ElemType *p = &(L.elem[0]);
		if ((p + i)->name == de_name)
		{
			ElemType *q = L.elem + L.length - 1;
			for (p++; p + i <= q; ++p)
				*(p + i - 1) = *(p + i);
			--L.length;
			find = true;
		}
	}
	if (find == 0)
		return ERROR;


	return OK;


}//LIST_DELETE
Status reverse(SqList &L,  ElemType &e)
{
	bool find = false;queue<ElemType&>  Q;
	for (int i = 0; i < L.length; i++)
	{
		
		
		Q.push((L.elem[i]));

	}
	for (int i = 0; i < L.length; i++)
	{
		*(L.elem[i]) = Q.pop();
	}

	if (find == 0)
		return ERROR;

	return OK;


}//LIST_DELETE





int main()

{






	SqList a;


	InitList_Sq(a);
	HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(handle, FOREGROUND_INTENSITY | FOREGROUND_GREEN);
	cout << "the initialize is finished!" << endl;
	SetConsoleTextAttribute(handle, FOREGROUND_INTENSITY | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED);
	cout << "please input two number:" << endl << "the first is locate the second is value!" << endl;

	while (true)
	{
		int locate;
		ElemType value;
		int choose;
		SetConsoleTextAttribute(handle, FOREGROUND_INTENSITY | FOREGROUND_BLUE);
		cout << "学生信息管理系统" << endl;
		cout << "======================================================" << endl;
		cout << "1.学生信息线性表的建立" << endl;
		cout << "2.插入学生信息" << endl;
		cout << "3.查询学生信息" << endl;
		cout << "4.删除学生信息" << endl;
		cout << "5.输出所有学生信息" << endl;
		cout << "6.信息表逆序" << endl;
		cout << "0.退出学生管理系统" << endl;
		cout << "======================================================" << endl;
		cout << "请选择0~5"<<endl;

		SetConsoleTextAttribute(handle, FOREGROUND_INTENSITY | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED);
		cin >> choose;
string ID_use;
			string name_use;
			string score_use;
			string sex_use;
			string de_id;
			string de_name;
			string find_id;
			string find_name;
		int judge=true;
		if (choose == 1)
		{
			cout << "======================================================" << endl;
			cout << "学生信息线性表的建立" << endl;
			cout << "======================================================" << endl;
			cout << "有几位学生？请输入：";
			int input_stu=0;
			cin >> input_stu;
			for (int j = 1; j <= input_stu; j++)
			{
				cout << "输入学号 " << endl;
				cin >> ID_use;
				cout << "输入姓名 " << endl;
				cin >> name_use;
				cout << "输入性别" << endl;
				cin >> sex_use;
				cout << "输入成绩" << endl;
				cin >> score_use;
				judge = ListInsert_Sq(a,j, ID_use, name_use, sex_use, score_use);
			}
		}
		if (choose == 2)
		{
			cout << "输入插入的位置" << endl;
			cin >> locate;
			

			cout << "输入学号 " << endl;
			cin >> ID_use;
			cout << "输入姓名 " << endl;
			cin >> name_use;
			cout << "输入性别" << endl;
			cin >> sex_use;
			cout << "输入成绩" << endl;
			cin >> score_use;
			judge = ListInsert_Sq(a, locate, ID_use, name_use, sex_use, score_use);
			cout << "======================================================" << endl;
			cout << "学生信息线性表的建立" << endl;
			cout << "======================================================" << endl;

			for (int i = 0; i < a.length; i++)

			{
				cout << "学号\t" << "姓名\t" << "性别\t" << "成绩" << endl;
				//cout << a.elem[i] << " ";
				ToYellow;
				cout << *(&(a.elem + i)->ID) << "\t" << *(&(a.elem + i)->name) << " \t" << *(&(a.elem + i)->sex) << "\t" << *(&(a.elem + i)->score) << endl; ToWhite;


			}
		}
		else if (choose == 5)
		{
			
			for (int i = 0; i < a.length; i++)

			{
				cout << "学号\t" << "姓名\t" << "性别\t" << "成绩" << endl;
				//cout << a.elem[i] << " ";
				ToYellow;
				cout << *(&(a.elem + i)->ID) << "\t" << *(&(a.elem + i)->name) << " \t" << *(&(a.elem + i)->sex) << "\t" << *(&(a.elem + i)->score) << endl; ToWhite;
				 

			}
		}
		else if (choose == 3)
		{

				cout << "请输入按学号查询";
				cin >> find_id;
				
				cout << "学号\t" << "姓名\t" << "性别\t" << "成绩" << endl;
				//cout << a.elem[i] << " ";
				ToYellow;
				for (int i = 0; i < a.length;i++)
				if ((a.elem + i)->ID==find_id)
				cout << *(&(a.elem + i)->ID) << "\t" << *(&(a.elem + i)->name) << " \t" << *(&(a.elem + i)->sex) << "\t" << *(&(a.elem + i)->score) << endl; ToWhite;


			
		}


		else if (choose == 4)
		{
			cout << "请输入要查询的方式 ";
			cout << "1.按学号查询";
			cout << "2.按姓名查询";
			int se;
			cin >> se;
			if (se == 1)
			{
					cin >> de_id;

			judge = ListDelete_id_Sq(a, de_id, value);
			}
			if (se == 2)
			{
				cin >> de_id;

				judge = ListDelete_name_Sq(a, de_id, value);
			}
			
			//cout << "your delete the value " << value << " locate in " << locate << endl;
		}
		else if (choose == 5)
		{
			cout << "======================================================" << endl;
			cout << "学生信息线性表的建立" << endl;
			cout << "======================================================" << endl;

			for (int i = 0; i < a.length; i++)

			{
				cout << "学号\t" << "姓名\t" << "性别\t" << "成绩" << endl;
				//cout << a.elem[i] << " ";
				ToYellow;
				cout << *(&(a.elem + i)->ID) << "\t" << *(&(a.elem + i)->name) << " \t" << *(&(a.elem + i)->sex) << "\t" << *(&(a.elem + i)->score) << endl; ToWhite;


			}
		}
		else if (choose == 0)
			exit(0);

		if (judge == ERROR)
		{
			SetConsoleTextAttribute(handle, FOREGROUND_INTENSITY | FOREGROUND_RED);

			cout << "ERROR" << endl;
			SetConsoleTextAttribute(handle, FOREGROUND_INTENSITY | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED);

			continue;
		}
		if (judge == OVERFLOW)
		{
			//system("color 02");
			SetConsoleTextAttribute(handle, FOREGROUND_INTENSITY | FOREGROUND_RED);

			cout << "OVERFLOW!!!Your input is illegal!Again!" << endl << endl;
			SetConsoleTextAttribute(handle, FOREGROUND_INTENSITY | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED);
			continue;
		}

		HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
		SetConsoleTextAttribute(handle, FOREGROUND_INTENSITY | FOREGROUND_GREEN);
		cout << endl << "操作已完成，请再次输入!" << endl << endl;
		SetConsoleTextAttribute(handle, FOREGROUND_INTENSITY | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED);
		system("pause");

	}







}

/*

void MergeList(List La, List Lb,List &Lc)

{


}

*/
